#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <avr/power.h>

#include "masks.h"

#define UBRR_VALUE ((F_CPU / (16UL * 9600)) - 1)
#define LED_PIN PB5

// Motor 1 defines
#define MOTOR0_SIGNAL0_H PD7
#define MOTOR0_SIGNAL0_L PD6
#define MOTOR0_SIGNAL1_H PD5
#define MOTOR0_SIGNAL1_L PD4
#define MOTOR0_SIGNAL2_H PD3
#define MOTOR0_SIGNAL2_L PD2

#define MOTOR0_ALL_SIGNALS (1 << MOTOR0_SIGNAL0_H) | (1 << MOTOR0_SIGNAL0_L) | (1 << MOTOR0_SIGNAL1_H) | (1 << MOTOR0_SIGNAL1_L) | (1 << MOTOR0_SIGNAL2_H) | (1 << MOTOR0_SIGNAL2_L)

#define MOTOR0_WINDING0_HIGH        (1 << MOTOR0_SIGNAL0_H) | (1 << MOTOR0_SIGNAL0_L)
#define MOTOR0_WINDING0_LOW         0
#define MOTOR0_WINDING0_FLOATING    (1 << MOTOR0_SIGNAL0_L)

#define MOTOR0_WINDING1_HIGH        (1 << MOTOR0_SIGNAL1_H) | (1 << MOTOR0_SIGNAL1_L)
#define MOTOR0_WINDING1_LOW         0
#define MOTOR0_WINDING1_FLOATING    (1 << MOTOR0_SIGNAL1_L)

#define MOTOR0_WINDING2_HIGH        (1 << MOTOR0_SIGNAL2_H) | (1 << MOTOR0_SIGNAL2_L)
#define MOTOR0_WINDING2_LOW         0
#define MOTOR0_WINDING2_FLOATING    (1 << MOTOR0_SIGNAL2_L)

#define MOTOR0_ROTATION0 MOTOR0_WINDING0_HIGH       | MOTOR0_WINDING1_LOW       | MOTOR0_WINDING2_FLOATING
#define MOTOR0_ROTATION1 MOTOR0_WINDING0_HIGH       | MOTOR0_WINDING1_FLOATING  | MOTOR0_WINDING2_LOW
#define MOTOR0_ROTATION2 MOTOR0_WINDING0_FLOATING   | MOTOR0_WINDING1_HIGH      | MOTOR0_WINDING2_LOW 
#define MOTOR0_ROTATION3 MOTOR0_WINDING0_LOW        | MOTOR0_WINDING1_HIGH      | MOTOR0_WINDING2_FLOATING
#define MOTOR0_ROTATION4 MOTOR0_WINDING0_LOW        | MOTOR0_WINDING1_FLOATING  | MOTOR0_WINDING2_HIGH
#define MOTOR0_ROTATION5 MOTOR0_WINDING0_FLOATING   | MOTOR0_WINDING1_LOW       | MOTOR0_WINDING2_HIGH

#define MOTOR0_PORT PORTD
#define MOTOR0_DDR DDRD


// motor 2 defines
#define MOTOR1_SIGNAL0_H PB5
#define MOTOR1_SIGNAL0_L PB4
#define MOTOR1_SIGNAL1_H PB3
#define MOTOR1_SIGNAL1_L PB2
#define MOTOR1_SIGNAL2_H PB1
#define MOTOR1_SIGNAL2_L PB0

#define MOTOR1_ALL_SIGNALS (1 << MOTOR1_SIGNAL0_H) | (1 << MOTOR1_SIGNAL0_L) | (1 << MOTOR1_SIGNAL1_H) | (1 << MOTOR1_SIGNAL1_L) | (1 << MOTOR1_SIGNAL2_H) | (1 << MOTOR1_SIGNAL2_L)

#define MOTOR1_WINDING0_HIGH        (1 << MOTOR1_SIGNAL0_H) | (1 << MOTOR1_SIGNAL0_L)
#define MOTOR1_WINDING0_LOW         0
#define MOTOR1_WINDING0_FLOATING    (1 << MOTOR1_SIGNAL0_L)

#define MOTOR1_WINDING1_HIGH        (1 << MOTOR1_SIGNAL1_H) | (1 << MOTOR1_SIGNAL1_L)
#define MOTOR1_WINDING1_LOW         0
#define MOTOR1_WINDING1_FLOATING    (1 << MOTOR1_SIGNAL1_L)

#define MOTOR1_WINDING2_HIGH        (1 << MOTOR1_SIGNAL2_H) | (1 << MOTOR1_SIGNAL2_L)
#define MOTOR1_WINDING2_LOW         0
#define MOTOR1_WINDING2_FLOATING    (1 << MOTOR1_SIGNAL2_L)

#define MOTOR1_ROTATION0 MOTOR1_WINDING0_HIGH       | MOTOR1_WINDING1_LOW       | MOTOR1_WINDING2_FLOATING
#define MOTOR1_ROTATION1 MOTOR1_WINDING0_HIGH       | MOTOR1_WINDING1_FLOATING  | MOTOR1_WINDING2_LOW
#define MOTOR1_ROTATION2 MOTOR1_WINDING0_FLOATING   | MOTOR1_WINDING1_HIGH      | MOTOR1_WINDING2_LOW 
#define MOTOR1_ROTATION3 MOTOR1_WINDING0_LOW        | MOTOR1_WINDING1_HIGH      | MOTOR1_WINDING2_FLOATING
#define MOTOR1_ROTATION4 MOTOR1_WINDING0_LOW        | MOTOR1_WINDING1_FLOATING  | MOTOR1_WINDING2_HIGH
#define MOTOR1_ROTATION5 MOTOR1_WINDING0_FLOATING   | MOTOR1_WINDING1_LOW       | MOTOR1_WINDING2_HIGH

#define MOTOR1_PORT PORTB
#define MOTOR1_DDR DDRB

// Hallefect sensor defines motor 0
#define HALL_SENS_0_MOTOR0 PC0
#define HALL_SENS_1_MOTOR0 PC1
#define HALL_SENS_2_MOTOR0 PC2

// Hallefect sensor defines motor 1
#define HALL_SENS_0_MOTOR0 PC3
#define HALL_SENS_1_MOTOR0 PC4
#define HALL_SENS_2_MOTOR0 PC5

void setupTimer0_8pre_interupts(void) {
    // 8 prescaler
    TCCR0B = TCCR0_PRESCALE_8_MASK;
    // compare value of A
    OCR0A = 240;    
    // enable interupts
    TIMSK0 = (1 << TOIE0) | (1 << OCIE0A) | (1 << OCIE0B);
}

void setupTimer1(void) {
    TCCR1A = 0;
    TCCR1B = TCCR1_PRESCALER_1024_MASK | (1 << WGM12);
    TIMSK1 = (1 << OCIE1A);
    OCR1A = 56000;
    TCNT1 = 0;
}

void Timer1_disable(void) {
    TCCR1B = 0;
}

void Timer1_enable(void) {
    TCCR1B = TCCR1_PRESCALER_1024_MASK | (1 << WGM12);
}


void USART_init(void) {
    // Set baud rate
    UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
    UBRR0L = (uint8_t)(UBRR_VALUE);

    // Enable receiver and transmitter and interupt on RX and empty TX buffer
    UCSR0B = (1 << RXEN0);
    UCSR0B |= (1 << TXEN0);
    UCSR0B |= (1 << UDRIE0);
    UCSR0B |= (1 << RXCIE0);

    // Set frame format: 8 data bits, 1 stop bit, no parity
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

